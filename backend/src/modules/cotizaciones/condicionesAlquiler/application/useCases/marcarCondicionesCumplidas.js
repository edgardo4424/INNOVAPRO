module.exports = async (cotizacionId, condicionesCumplidas, condicionRepository, cotizacionRepository) => {
  const condicion = await condicionRepository.obtenerPorCotizacionId(cotizacionId);
  if (!condicion) {
    return { codigo: 404, respuesta: { mensaje: "No se encontrÃ³ la condiciÃ³n" } };
  }

  const condicionesRawCompleto = condicion.condiciones.split("âœ… CONDICIONES AUTORIZADAS:")[1] || "";

  // Eliminamos todo lo que venga despuÃ©s de OBSERVACIÃ“N:
  const condicionesLimpias = condicionesRawCompleto.split("OBSERVACIÃ“N:")[0] || "";

  const definidas = condicionesLimpias
    .split("â€¢")
    .map((c) => c.trim())
    .filter(Boolean);


  const faltantes = definidas.filter(c => !condicionesCumplidas.includes(c));
  const todasCumplidas = faltantes.length === 0;

  // Actualizamos las condiciones 
  await condicionRepository.actualizarCondicionesCumplidas(cotizacionId, condicionesCumplidas);

  // Si estÃ¡n todas cumplidas, tambiÃ©n actualizamos el estado de la cotizaciÃ³n
  if (todasCumplidas) {
    await cotizacionRepository.actualizarEstado(cotizacionId, 9); // 9 significa "Condiciones Cumplidas"
  }
  
    console.log("ðŸ’¬ CondiciÃ³n encontrada:", condicion);
    console.log("ðŸ’¬ Condiciones definidas:", definidas);
    console.log("ðŸ’¬ Condiciones cumplidas:", condicionesCumplidas);
    console.log("ðŸ’¬ Todas cumplidas:", todasCumplidas);
    console.log("ðŸ’¬ Faltantes:", faltantes);


  return {
    codigo: 200,
    respuesta: {
        mensaje: todasCumplidas
          ? "Todas las condiciones fueron cumplidas. Estado actualizado correctamente."
          : "Condiciones actualizadas correctamente, pero aÃºn faltan algunas por cumplir.",
          todasCumplidas,
    }
  }
};